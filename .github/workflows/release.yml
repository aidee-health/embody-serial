name: Release

on:
  push:
    branches:
      - main

jobs:
  test:
    uses: ./.github/workflows/tests.yml
    secrets: inherit

  release:
    name: Release
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Set up the environment
        uses: ./.github/actions/setup-python-env

      - name: Run checks
        run: make check

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.3
        with:
          version-command: |
            bash -o pipefail -c "grep -m 1 'version = ' pyproject.toml | sed -E 's/.*version = \"([^\"]+)\".*/\1/'"

      - name: Bump version for developmental release
        if: ${{ ! steps.check-version.outputs.tag }}
        run: |
          pip install tomli tomli-w
          # Python script to bump patch version and add dev suffix
          python -c "
          import tomli, tomli_w, time, re

          # Read the current pyproject.toml
          with open('pyproject.toml', 'rb') as f:
              data = tomli.load(f)

          # Extract current version
          current = data['project']['version']

          # Increase patch version
          version_parts = current.split('.')
          version_parts[-1] = str(int(version_parts[-1]) + 1)
          new_version = '.'.join(version_parts)

          # Add dev suffix with timestamp
          dev_version = f'{new_version}.dev.{int(time.time())}'
          data['project']['version'] = dev_version

          # Write back to pyproject.toml
          with open('pyproject.toml', 'wb') as f:
              tomli_w.dump(data, f)

          print(f'Bumped version from {current} to {dev_version}')
          "

      - name: Build package
        run: |
          uv build --wheel --sdist

      - name: Publish package on PyPI
        if: steps.check-version.outputs.tag
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v6.1.0
        with:
          publish: ${{ steps.check-version.outputs.tag != '' }}
          tag: ${{ steps.check-version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
